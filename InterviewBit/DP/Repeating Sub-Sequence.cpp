/*
Repeating Sub-Sequence
Problem Description

Given a string A, find if there is any subsequence that repeats itself.

A subsequence of a string is defined as a sequence of characters generated by deleting some characters in the string without changing the order of the remaining characters.

NOTE: Sub-sequence length should be greater than or equal to 2.



Problem Constraints
1 <= length(A) <= 100



Input Format
The first and the only argument of input contains a string A.



Output Format
Return an integer, 1 if there is any subsequence which repeat itself else return 0.



Example Input
Input 1:

 A = "abab"
Input 2:

 A = "abba"


Example Output
Output 1:

 1
Output 2:

 0


Example Explanation
Explanation 1:

 "ab" is repeated.
Explanation 2:

 There is no repeating subsequence.
 
*/

string v;
bool ok;
int memo[1002][1002];
int dp(int i,int j,int s)
{
    if(ok)
        return 1;
    if(s==2)
    {
        ok=true;
        return 1;
    }
    if(i==v.size()||j==v.size())
        return -(1<<30);
    if(memo[i][j])
        return memo[i][j];
    for(int k=j;k<v.size();k++)
    {
        if(v[k]==v[i]&&k>i)
            return memo[i][j]=max(dp(i+1,k+1,s+1),dp(i+1,j,s));
    }
    return memo[i][j]=dp(i+1,j,s);
}
int Solution::anytwo(string A) {
    ok=false;
    memset(memo,0,sizeof(memo));
    v=A;
    int uso=dp(0,0,0);
    return ok;
}


/*
public class Solution {
	public int anytwo(String A) {
	    
	    int dp[][];
	    int n;
	    
	    n = A.length();
	    dp = new int[n + 1][n + 1];
	    
	    for (int i = 1; i < n + 1; i++) {
	        for (int j = i + 1; j < n + 1; j++) {
                if (A.charAt(i - 1) == A.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
	        }
	    }
	    
	    for (int i = 0; i < n + 1; i++) {
	        for (int j = 0; j < n + 1; j++) {
	            if (dp[i][j] > 1)
	                return 1;
	        }
	    }
	    
	    return 0;
	    
	    
	}
}
________________________________________________________________________________________________________
int N;
vector<vector<int> > dp;    

int rec(int x, int y, string A) {
    if(x == N || y == N)
            return 0;
    
    if(dp[x][y] != -1)
            return dp[x][y];

    int ans = rec(x + 1, y, A);
    ans = max(ans, rec(x, y + 1, A));
    if(x != y && A[x] == A[y]) {
       ans = max(ans, rec(x + 1, y + 1, A) + 1);
    }

    return dp[x][y] = ans;
}
    
int Solution::anytwo(string A) {
    N = A.size();
    dp.clear();
    dp.resize(N, vector<int> (N, -1));

    int ans = rec(0, 0, A);
    return ans >= 2;
    
}

*/